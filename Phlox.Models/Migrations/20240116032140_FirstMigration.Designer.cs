// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Phlox.Models;

#nullable disable

namespace Phlox.Models.Migrations
{
    [DbContext(typeof(PhloxContext))]
    [Migration("20240116032140_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityAlwaysColumns(modelBuilder);

            modelBuilder.Entity("Phlox.Models.Deal", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int?>("Id"));

                    b.Property<int>("Discount")
                        .HasColumnType("integer")
                        .HasColumnName("discount");

                    b.Property<string>("Info")
                        .HasColumnType("text")
                        .HasColumnName("info");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_deal");

                    b.ToTable("deal", (string)null);
                });

            modelBuilder.Entity("Phlox.Models.ExternalAccount", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int?>("Id"));

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_external_account");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_external_account_user_id");

                    b.ToTable("external_account", (string)null);
                });

            modelBuilder.Entity("Phlox.Models.Item", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int?>("Id"));

                    b.Property<string>("Info")
                        .HasColumnType("text")
                        .HasColumnName("info");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_item");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_item_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_item_user_id");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("Phlox.Models.ItemDeal", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("DealId")
                        .HasColumnType("integer")
                        .HasColumnName("deal_id");

                    b.HasKey("ItemId", "DealId")
                        .HasName("pk_item_deal");

                    b.HasIndex("DealId")
                        .HasDatabaseName("ix_item_deal_deal_id");

                    b.ToTable("item_deal", (string)null);
                });

            modelBuilder.Entity("Phlox.Models.ItemPhoto", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.HasKey("ItemId")
                        .HasName("pk_item_photo");

                    b.ToTable("item_photo", (string)null);
                });

            modelBuilder.Entity("Phlox.Models.Product", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Phlox.Models.Users", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int?>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Phlox.Models.ExternalAccount", b =>
                {
                    b.HasOne("Phlox.Models.Users", "User")
                        .WithMany("ExternalAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_account_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Phlox.Models.Item", b =>
                {
                    b.HasOne("Phlox.Models.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_product_product_id");

                    b.HasOne("Phlox.Models.Users", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_users_user_id");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Phlox.Models.ItemDeal", b =>
                {
                    b.HasOne("Phlox.Models.Deal", "Deal")
                        .WithMany("ItemDeals")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_deal_deal_deal_id");

                    b.HasOne("Phlox.Models.Item", "Item")
                        .WithMany("ItemDeals")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_deal_item_item_id");

                    b.Navigation("Deal");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Phlox.Models.ItemPhoto", b =>
                {
                    b.HasOne("Phlox.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_photo_item_item_id");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Phlox.Models.Deal", b =>
                {
                    b.Navigation("ItemDeals");
                });

            modelBuilder.Entity("Phlox.Models.Item", b =>
                {
                    b.Navigation("ItemDeals");
                });

            modelBuilder.Entity("Phlox.Models.Product", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Phlox.Models.Users", b =>
                {
                    b.Navigation("ExternalAccounts");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
